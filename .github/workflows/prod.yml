name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push app-service Docker image
      run: |
        cd app-service
        docker build -t ddresser05/app-service:latest -t ddresser05/app-service:${{ github.sha }} . &
        APP_PID=$!
        
        cd ../auth-service
        docker build -t ddresser05/auth-service:latest -t ddresser05/auth-service:${{ github.sha }} . &
        AUTH_PID=$!
        
        wait $APP_PID
        wait $AUTH_PID
        
        docker push ddresser05/app-service:latest &
        docker push ddresser05/app-service:${{ github.sha }} &
        docker push ddresser05/auth-service:latest &
        docker push ddresser05/auth-service:${{ github.sha }} &
        wait

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Copy compose.yml to droplet
      run: sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:~

    - name: Copy nginx configuration to droplet
      run: sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no nginx.conf root@${{ vars.DROPLET_IP }}:~

    - name: Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          echo "AUTH_SERVICE_IP=${{ vars.DROPLET_IP }}" > .env
          echo "CERTBOT_EMAIL=${{ vars.CERTBOT_EMAIL }}" >> .env
          docker compose down
          docker volume rm root_webroot || true
          docker compose pull --ignore-pull-failures
          docker image prune -f
          docker compose --profile prod up -d --force-recreate